#!/usr/bin/env python3

from optparse import OptionParser
from formatter import Formatter
from textwrap import dedent

from filereader import get_communities_data

class SQLFormatter(Formatter):
    """
    Base class for all SQL based formatters
    """

    def add_comment(self, comment):
        """
        Add a comment to the config. Default is prefixed with #
        """
        self.config.append("% " + "\n% ".join(comment.split("\n")))

    """Formatter for SQL"""
    def add_data(self, community, networks):
        self.config.append("INSERT INTO isps (network, isp) VALUES%s;" % ''.join([
            "\n    ('%s', '%s')" % (network, community) for network in networks
        ]))

class PostgreSQLFormatter(SQLFormatter):
    def __init__(self):
        self.config = []
        self.add_comment(dedent(
            """
            This file is automatically generated.
            Import using psql -h foo.example isplookup isplookup < isplookup.sql
            """
        ))

def create_export(srcdir, fmtclass, exclude=set()):
    """
    Generates a SQL export using all files in srcdir
    """
    formatter = fmtclass()
    for community, data in get_communities_data(srcdir, exclude):
        try:
            ipv4 = data['networks']['ipv4']
            ipv6 = data['networks']['ipv6']
        except (TypeError, KeyError):
            continue

        formatter.add_comment(community)

        formatter.add_data(community, ipv4+ipv6)

    print(formatter.finalize())

if __name__ == '__main__':
    formatters = {
        "postgres": PostgreSQLFormatter,
    }

    parser = OptionParser(description='Generates SQL files to populate IP to ISP lookup databases')
    parser.add_option("-f", "--format", dest="fmt",
                      help="""Create config in format FMT.
                              Possible values: %s. Default: postgres""" %
                           ", ".join(formatters.keys()),
                      metavar="FMT",
                      choices=list(formatters.keys()),
                      default="postgres")
    parser.add_option("-s", "--sourcedir", dest="src",
                      help="Use files in DIR as input files. Default: "
                           "../icvpn-meta/",
                      metavar="DIR",
                      default="../icvpn-meta/")
    parser.add_option("-x", "--exclude", dest="exclude", action="append",
                      help="Exclude COMMUNITY (may be repeated)",
                      metavar="COMMUNITY",
                      default=[])

    (options, args) = parser.parse_args()

    create_export(options.src,
                  formatters[options.fmt],
                  set(options.exclude))